import sqlite3
import pandas as pd
import numpy as np
from datetime import datetime
import os
from collections import defaultdict, Counter

def analyze_f1_pit_strategy(db_name="f1db_YR=2024"):
    """
    –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø—ñ—Ç-—Å—Ç—Ä–∞—Ç–µ–≥—ñ–π –§–æ—Ä–º—É–ª–∏ 1 2024:
    - –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø—ñ—Ç-—Å—Ç–æ–ø—ñ–≤ –¥–æ 60 —Å–µ–∫—É–Ω–¥
    - –ê–Ω–∞–ª—ñ–∑ —Ç—ñ–ª—å–∫–∏ –≥–æ–Ω–æ–∫ (–Ω–µ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ–π/–ø—Ä–∞–∫—Ç–∏–∫)
    - –°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —É–º–æ–≤ –≥–æ–Ω–∫–∏
    - –ê–Ω–∞–ª—ñ–∑ –≤–ø–ª–∏–≤—É –ø–æ–≥–æ–¥–∏, –ø–æ–∑–∏—Ü—ñ–π, –±–µ–∑–ø–µ—á–Ω–∏—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤
    """
    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    db_path = f"data/{db_name}/database.db"
    conn = sqlite3.connect(db_path)

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    output_dir = f"data/{db_name}"
    os.makedirs(output_dir, exist_ok=True)
    output_file = os.path.join(output_dir, "enhanced_pit_analysis.txt")

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∏–≤–æ–¥—É
    output_content = []

    def print_and_log(text="", file_only=False):
        """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–æ–¥—É –≤ –∫–æ–Ω—Å–æ–ª—å —Ç–∞ —Ñ–∞–π–ª"""
        if not file_only:
            print(text)
        output_content.append(text)

    try:
        print_and_log("üèÅ –î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó –ü–Ü–¢-–°–¢–†–ê–¢–ï–ì–Ü–ô F1 2024")
        print_and_log("=" * 80)
        print_and_log(f"–ê–Ω–∞–ª—ñ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print_and_log("=" * 80)
        print_and_log()

        # ============================================
        # 1. –ó–ë–Ü–† –û–°–ù–û–í–ù–ò–• –î–ê–ù–ò–• –ü–Ü–¢-–°–¢–û–ü–Ü–í
        # ============================================
        print_and_log("üìä –ó–ë–Ü–† –î–ê–ù–ò–• –ü–Ü–¢-–°–¢–û–ü–Ü–í...")
        print_and_log("-" * 40)

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø—ñ—Ç-—Å—Ç–æ–ø—ñ–≤ —Ç—ñ–ª—å–∫–∏ –∑ –≥–æ–Ω–æ–∫, –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é –¥–æ 60 —Å–µ–∫—É–Ω–¥
        main_pit_query = """
        SELECT
            p.session_key,
            p.driver_number,
            p.lap_number,
            p.pit_duration,
            p.date as pit_time,
            d.broadcast_name,
            d.full_name,
            d.team_name,
            d.team_colour,
            m.meeting_name,
            m.date_start as race_date,
            m.location,
            s.date_start as session_start,
            s.date_end as session_end
        FROM pit p
        JOIN drivers d ON p.driver_number = d.driver_number AND p.session_key = d.session_key
        JOIN sessions s ON p.session_key = s.session_key
        JOIN meetings m ON s.meeting_key = m.meeting_key
        WHERE s.session_name = 'Race' 
            AND p.pit_duration > 0 
            AND p.pit_duration <= 60.0
        ORDER BY m.date_start, p.driver_number, p.lap_number
        """

        pit_data = pd.read_sql_query(main_pit_query, conn)
        pit_data['pit_time'] = pd.to_datetime(pit_data['pit_time'], format='ISO8601')
        pit_data['race_date'] = pd.to_datetime(pit_data['race_date'])

        print_and_log(f"–í–∞–ª—ñ–¥–Ω–∏—Ö –ø—ñ—Ç-—Å—Ç–æ–ø—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ (‚â§60—Å): {len(pit_data)}")
        print_and_log(f"–ì—Ä–∞–Ω-–ø—Ä—ñ –∑ –ø—ñ—Ç-—Å—Ç–æ–ø–∞–º–∏: {pit_data['meeting_name'].nunique()}")
        print_and_log(f"–ö–æ–º–∞–Ω–¥: {pit_data['team_name'].nunique()}")
        print_and_log(f"–ü—ñ–ª–æ—Ç—ñ–≤: {pit_data['broadcast_name'].nunique()}")
        print_and_log()

        # ============================================
        # 2. –ê–ù–ê–õ–Ü–ó –ü–û –ì–†–ê–ù-–ü–†–Ü
        # ============================================
        print_and_log("üèÜ –ê–ù–ê–õ–Ü–ó –ü–û –ö–û–ñ–ù–û–ú–£ –ì–†–ê–ù-–ü–†–Ü")
        print_and_log("-" * 35)

        for gp_name, gp_data in pit_data.groupby('meeting_name'):
            print_and_log(f"\nüìç {gp_name}")
            print_and_log(f"   –î–∞—Ç–∞: {gp_data['race_date'].iloc[0].strftime('%d.%m.%Y')}")
            print_and_log(f"   –õ–æ–∫–∞—Ü—ñ—è: {gp_data['location'].iloc[0]}")
            
            # –û—Å–Ω–æ–≤–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–Ω–∫–∏
            total_stops = len(gp_data)
            avg_duration = gp_data['pit_duration'].mean()
            fastest_stop = gp_data['pit_duration'].min()
            slowest_stop = gp_data['pit_duration'].max()
            teams_count = gp_data['team_name'].nunique()
            
            print_and_log(f"   –ü—ñ—Ç-—Å—Ç–æ–ø—ñ–≤: {total_stops}")
            print_and_log(f"   –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: {avg_duration:.3f}—Å")
            print_and_log(f"   –ù–∞–π—à–≤–∏–¥—à–∏–π: {fastest_stop:.3f}—Å")
            print_and_log(f"   –ù–∞–π–ø–æ–≤—ñ–ª—å–Ω—ñ—à–∏–π: {slowest_stop:.3f}—Å")
            print_and_log(f"   –ö–æ–º–∞–Ω–¥: {teams_count}")

            # –ù–∞–π–∫—Ä–∞—â—ñ –ø—ñ—Ç-—Å—Ç–æ–ø–∏ –≥–æ–Ω–∫–∏
            best_stops = gp_data.nsmallest(3, 'pit_duration')
            print_and_log(f"   üèÖ –¢–æ–ø-3 –ø—ñ—Ç-—Å—Ç–æ–ø–∏:")
            for idx, (_, stop) in enumerate(best_stops.iterrows(), 1):
                print_and_log(f"      {idx}. {stop['broadcast_name']} ({stop['team_name']}) - {stop['pit_duration']:.3f}—Å (–∫–æ–ª–æ {stop['lap_number']})")

        print_and_log()

        # ============================================
        # 3. –ê–ù–ê–õ–Ü–ó –í–ü–õ–ò–í–£ –ü–û–ì–û–î–ù–ò–• –£–ú–û–í
        # ============================================
        print_and_log("üå§Ô∏è –í–ü–õ–ò–í –ü–û–ì–û–î–ù–ò–• –£–ú–û–í –ù–ê –ü–Ü–¢-–°–¢–†–ê–¢–ï–ì–Ü–Æ")
        print_and_log("-" * 45)

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –ø–æ–≥–æ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        weather_query = """
        SELECT
            w.session_key,
            w.date as weather_time,
            w.air_temperature,
            w.track_temperature,
            w.humidity,
            w.pressure,
            w.rainfall,
            w.wind_speed,
            w.wind_direction,
            m.meeting_name
        FROM weather w
        JOIN sessions s ON w.session_key = s.session_key
        JOIN meetings m ON s.meeting_key = m.meeting_key
        WHERE s.session_name = 'Race'
        ORDER BY w.date
        """
        weather_data = pd.read_sql_query(weather_query, conn)
        weather_data['weather_time'] = pd.to_datetime(weather_data['weather_time'], format='ISO8601')

        # –û–±'—î–¥–Ω–∞–Ω–Ω—è –ø–æ–≥–æ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ –ø—ñ—Ç-—Å—Ç–æ–ø–∞–º–∏
        pit_weather = pd.merge_asof(
            pit_data.sort_values('pit_time'),
            weather_data.sort_values('weather_time'),
            left_on='pit_time',
            right_on='weather_time',
            by='session_key',
            direction='nearest',
            tolerance=pd.Timedelta('10 minutes')
        )

        # –ê–Ω–∞–ª—ñ–∑ –¥–æ—â–æ–≤–∏—Ö —É–º–æ–≤
        rain_threshold = 1.0
        if pit_weather['rainfall'].notna().any():
            rain_conditions = pit_weather[pit_weather['rainfall'] >= rain_threshold]
            dry_conditions = pit_weather[pit_weather['rainfall'] < rain_threshold]
            
            if not rain_conditions.empty and not dry_conditions.empty:
                print_and_log(f"–ü—ñ—Ç-—Å—Ç–æ–ø–∏ –ø—ñ–¥ –¥–æ—â–µ–º (‚â•{rain_threshold}–º–º): {len(rain_conditions)}")
                print_and_log(f"–ü—ñ—Ç-—Å—Ç–æ–ø–∏ –≤ —Å—É—Ö—É –ø–æ–≥–æ–¥—É: {len(dry_conditions)}")
                print_and_log(f"–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –ø—ñ–¥ –¥–æ—â–µ–º: {rain_conditions['pit_duration'].mean():.3f}—Å")
                print_and_log(f"–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤ —Å—É—Ö—É –ø–æ–≥–æ–¥—É: {dry_conditions['pit_duration'].mean():.3f}—Å")
                print_and_log(f"–†—ñ–∑–Ω–∏—Ü—è: {rain_conditions['pit_duration'].mean() - dry_conditions['pit_duration'].mean():+.3f}—Å")
                print_and_log()

        # –ê–Ω–∞–ª—ñ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∏—Ö —É–º–æ–≤
        if pit_weather['track_temperature'].notna().any():
            temp_median = pit_weather['track_temperature'].median()
            hot_conditions = pit_weather[pit_weather['track_temperature'] > temp_median]
            cool_conditions = pit_weather[pit_weather['track_temperature'] <= temp_median]
            
            print_and_log(f"–ú–µ–¥—ñ–∞–Ω–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç—Ä–µ–∫—É: {temp_median:.1f}¬∞C")
            print_and_log(f"–ü—ñ—Ç-—Å—Ç–æ–ø–∏ –≤ –∂–∞—Ä–∫–∏—Ö —É–º–æ–≤–∞—Ö (>{temp_median:.1f}¬∞C): {len(hot_conditions)}")
            print_and_log(f"–ü—ñ—Ç-—Å—Ç–æ–ø–∏ –≤ –ø—Ä–æ—Ö–æ–ª–æ–¥–Ω–∏—Ö —É–º–æ–≤–∞—Ö (‚â§{temp_median:.1f}¬∞C): {len(cool_conditions)}")
            if not hot_conditions.empty and not cool_conditions.empty:
                print_and_log(f"–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å —É –∂–∞—Ä—É: {hot_conditions['pit_duration'].mean():.3f}—Å")
                print_and_log(f"–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å —É –ø—Ä–æ—Ö–æ–ª–æ–¥—ñ: {cool_conditions['pit_duration'].mean():.3f}—Å")
                print_and_log(f"–†—ñ–∑–Ω–∏—Ü—è: {hot_conditions['pit_duration'].mean() - cool_conditions['pit_duration'].mean():+.3f}—Å")
            print_and_log()

        # ============================================
        # 4. –ê–ù–ê–õ–Ü–ó –í–ü–õ–ò–í–£ –ë–ï–ó–ü–ï–ß–ù–ò–• –ê–í–¢–û–ú–û–ë–Ü–õ–Ü–í
        # ============================================
        print_and_log("üö© –í–ü–õ–ò–í –ë–ï–ó–ü–ï–ß–ù–ò–• –ê–í–¢–û–ú–û–ë–Ü–õ–Ü–í –¢–ê –ü–†–ê–ü–û–†–Ü–í")
        print_and_log("-" * 45)

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –≥–æ–Ω–∫–∏
        race_control_query = """
        SELECT
            rc.session_key,
            rc.date,
            rc.lap_number,
            rc.driver_number,
            rc.message,
            rc.flag,
            rc.category,
            rc.scope,
            m.meeting_name
        FROM race_control rc
        JOIN sessions s ON rc.session_key = s.session_key
        JOIN meetings m ON s.meeting_key = m.meeting_key
        WHERE s.session_name = 'Race'
            AND (
                LOWER(rc.message) LIKE '%safety car%' OR
                LOWER(rc.message) LIKE '%virtual safety car%' OR
                LOWER(rc.message) LIKE '%vsc%' OR
                LOWER(rc.message) LIKE '%yellow%' OR
                LOWER(rc.message) LIKE '%red flag%'
            )
        ORDER BY s.date_start, rc.date
        """
        race_control_data = pd.read_sql_query(race_control_query, conn)

        # –ê–Ω–∞–ª—ñ–∑ –ø—ñ—Ç-—Å—Ç–æ–ø—ñ–≤ –ø—ñ–¥ —á–∞—Å –±–µ–∑–ø–µ—á–Ω–∏—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤
        sc_sessions = race_control_data[
            race_control_data['message'].str.contains('SAFETY CAR', case=False, na=False)
        ]['session_key'].unique()

        vsc_sessions = race_control_data[
            race_control_data['message'].str.contains('VIRTUAL SAFETY CAR|VSC', case=False, na=False)
        ]['session_key'].unique()

        if len(sc_sessions) > 0:
            sc_races = pit_data[pit_data['session_key'].isin(sc_sessions)]
            print_and_log(f"–ì–æ–Ω–∫–∏ –∑ Safety Car: {sc_races['meeting_name'].nunique()}")
            print_and_log(f"–ü—ñ—Ç-—Å—Ç–æ–ø–∏ –≤ SC –≥–æ–Ω–∫–∞—Ö: {len(sc_races)}")
            print_and_log(f"–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –ø—ñ—Ç-—Å—Ç–æ–ø—ñ–≤ –≤ SC –≥–æ–Ω–∫–∞—Ö: {sc_races['pit_duration'].mean():.3f}—Å")

        if len(vsc_sessions) > 0:
            vsc_races = pit_data[pit_data['session_key'].isin(vsc_sessions)]
            print_and_log(f"–ì–æ–Ω–∫–∏ –∑ VSC: {vsc_races['meeting_name'].nunique()}")
            print_and_log(f"–ü—ñ—Ç-—Å—Ç–æ–ø–∏ –≤ VSC –≥–æ–Ω–∫–∞—Ö: {len(vsc_races)}")
            print_and_log(f"–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –ø—ñ—Ç-—Å—Ç–æ–ø—ñ–≤ –≤ VSC –≥–æ–Ω–∫–∞—Ö: {vsc_races['pit_duration'].mean():.3f}—Å")

        print_and_log()

        # ============================================
        # 5. –ê–ù–ê–õ–Ü–ó –°–¢–†–ê–¢–ï–ì–Ü–ô –ö–û–ú–ê–ù–î
        # ============================================
        print_and_log("üèÅ –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –°–¢–†–ê–¢–ï–ì–Ü–ô –ö–û–ú–ê–ù–î")
        print_and_log("-" * 35)

        team_analysis = pit_data.groupby('team_name').agg({
            'pit_duration': ['count', 'mean', 'std', 'min', 'max'],
            'lap_number': ['mean', 'std']
        }).round(3)

        team_analysis.columns = ['_'.join(col).strip() for col in team_analysis.columns.values]
        team_analysis = team_analysis.sort_values('pit_duration_mean')

        print_and_log(f"{'–ö–æ–º–∞–Ω–¥–∞':<25} {'–°—Ç–æ–ø–∏':>6} {'–°–µ—Ä.—á–∞—Å':>8} {'–í—ñ–¥—Ö–∏–ª.':>8} {'–ö—Ä–∞—â–∏–π':>8} {'–ì—ñ—Ä—à–∏–π':>8}")
        print_and_log("-" * 75)

        for team in team_analysis.index:
            stops = int(team_analysis.loc[team, 'pit_duration_count'])
            avg_time = team_analysis.loc[team, 'pit_duration_mean']
            std_dev = team_analysis.loc[team, 'pit_duration_std']
            best_time = team_analysis.loc[team, 'pit_duration_min']
            worst_time = team_analysis.loc[team, 'pit_duration_max']

            print_and_log(f"{team[:24]:<25} {stops:>6} {avg_time:>8.3f} {std_dev:>8.3f} {best_time:>8.3f} {worst_time:>8.3f}")

        print_and_log()

        # ============================================
        # 6. –ê–ù–ê–õ–Ü–ó –í–ü–õ–ò–í–£ –ü–û–ó–ò–¶–Ü–á –ù–ê –ü–Ü–¢-–°–¢–†–ê–¢–ï–ì–Ü–Æ
        # ============================================
        print_and_log("üìç –í–ü–õ–ò–í –ü–û–ó–ò–¶–Ü–á –ù–ê –ü–Ü–¢-–°–¢–†–ê–¢–ï–ì–Ü–Æ")
        print_and_log("-" * 35)

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –ø–µ—Ä–µ–¥ –ø—ñ—Ç-—Å—Ç–æ–ø–∞–º–∏
        position_query = """
        SELECT
            p.session_key,
            p.driver_number,
            p.lap_number as pit_lap,
            p.pit_duration,
            d.broadcast_name,
            d.team_name,
            pos.position,
            m.meeting_name
        FROM pit p
        JOIN drivers d ON p.driver_number = d.driver_number AND p.session_key = d.session_key
        JOIN sessions s ON p.session_key = s.session_key
        JOIN meetings m ON s.meeting_key = m.meeting_key
        LEFT JOIN position pos ON p.session_key = pos.session_key 
                               AND p.driver_number = pos.driver_number
        WHERE s.session_name = 'Race' 
            AND p.pit_duration > 0 
            AND p.pit_duration <= 60.0
            AND pos.position IS NOT NULL
        """
        
        position_data = pd.read_sql_query(position_query, conn)
        
        if not position_data.empty:
            # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ –ø–æ–∑–∏—Ü—ñ—è—Ö
            position_groups = {
                '–¢–æ–ø-3 (1-3)': position_data[position_data['position'] <= 3],
                '–û—á–∫–æ–≤–∞ –∑–æ–Ω–∞ (4-10)': position_data[(position_data['position'] >= 4) & (position_data['position'] <= 10)],
                '–ë–µ–∑ –æ—á–æ–∫ (11+)': position_data[position_data['position'] >= 11]
            }
            
            for group_name, group_data in position_groups.items():
                if not group_data.empty:
                    print_and_log(f"{group_name}:")
                    print_and_log(f"  –ü—ñ—Ç-—Å—Ç–æ–ø—ñ–≤: {len(group_data)}")
                    print_and_log(f"  –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: {group_data['pit_duration'].mean():.3f}—Å")
                    print_and_log(f"  –ù–∞–π–∫—Ä–∞—â–∏–π: {group_data['pit_duration'].min():.3f}—Å")
                    print_and_log(f"  –ù–∞–π–≥—ñ—Ä—à–∏–π: {group_data['pit_duration'].max():.3f}—Å")
                    print_and_log()

        # ============================================
        # 7. –ê–ù–ê–õ–Ü–ó –®–ò–ù–ù–ò–• –°–¢–†–ê–¢–ï–ì–Ü–ô
        # ============================================
        print_and_log("üèéÔ∏è –ê–ù–ê–õ–Ü–ó –®–ò–ù–ù–ò–• –°–¢–†–ê–¢–ï–ì–Ü–ô")
        print_and_log("-" * 30)

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —Å—Ç—ñ–Ω—Ç–∏ —Ç–∞ —à–∏–Ω–∏
        stint_query = """
        SELECT
            st.session_key,
            st.driver_number,
            st.stint_number,
            st.lap_start,
            st.lap_end,
            st.compound,
            st.tyre_age_at_start,
            (st.lap_end - st.lap_start + 1) as stint_length,
            d.broadcast_name,
            d.team_name,
            m.meeting_name
        FROM stints st
        JOIN drivers d ON st.driver_number = d.driver_number AND st.session_key = d.session_key
        JOIN sessions s ON st.session_key = s.session_key
        JOIN meetings m ON s.meeting_key = m.meeting_key
        WHERE s.session_name = 'Race'
        ORDER BY m.date_start, st.driver_number, st.stint_number
        """
        
        stint_data = pd.read_sql_query(stint_query, conn)
        
        if not stint_data.empty:
            compound_stats = stint_data.groupby('compound').agg({
                'stint_length': ['mean', 'median', 'count'],
                'tyre_age_at_start': ['mean', 'median']
            }).round(2)
            
            compound_emojis = {
                'SOFT': 'üî¥', 'MEDIUM': 'üü°', 'HARD': '‚ö™',
                'INTERMEDIATE': 'üü¢', 'WET': 'üîµ'
            }
            
            print_and_log("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —à–∏–Ω:")
            for compound in compound_stats.index:
                if pd.notna(compound):
                    emoji = compound_emojis.get(compound, '‚ùì')
                    count = int(compound_stats.loc[compound, ('stint_length', 'count')])
                    avg_length = compound_stats.loc[compound, ('stint_length', 'mean')]
                    avg_age = compound_stats.loc[compound, ('tyre_age_at_start', 'mean')]
                    
                    print_and_log(f"  {emoji} {compound}:")
                    print_and_log(f"    –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –≤ {count} —Å—Ç—ñ–Ω—Ç–∞—Ö")
                    print_and_log(f"    –°–µ—Ä–µ–¥–Ω—è –¥–æ–≤–∂–∏–Ω–∞ —Å—Ç—ñ–Ω—Ç—É: {avg_length:.1f} –∫—ñ–ª")
                    print_and_log(f"    –°–µ—Ä–µ–¥–Ω—ñ–π –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∑–Ω–æ—Å: {avg_age:.1f} –∫—ñ–ª")
            print_and_log()

        # ============================================
        # 8. –ê–ù–ê–õ–Ü–ó –ï–§–ï–ö–¢–ò–í–ù–û–°–¢–Ü –ü–Ü–¢-–õ–ï–ô–ù–Ü–í
        # ============================================
        print_and_log("‚ö° –ï–§–ï–ö–¢–ò–í–ù–Ü–°–¢–¨ –ü–Ü–¢-–õ–ï–ô–ù–Ü–í –ü–û –¢–†–ê–°–ê–•")
        print_and_log("-" * 40)

        track_analysis = pit_data.groupby('meeting_name').agg({
            'pit_duration': ['count', 'mean', 'std', 'min', 'max']
        }).round(3)
        
        track_analysis.columns = ['_'.join(col).strip() for col in track_analysis.columns.values]
        track_analysis = track_analysis.sort_values('pit_duration_mean')
        
        print_and_log("–†–µ–π—Ç–∏–Ω–≥ –Ω–∞–π—à–≤–∏–¥—à–∏—Ö –ø—ñ—Ç-–ª–µ–π–Ω—ñ–≤:")
        for i, (track, data) in enumerate(track_analysis.head(10).iterrows(), 1):
            avg_time = data['pit_duration_mean']
            total_stops = int(data['pit_duration_count'])
            best_time = data['pit_duration_min']
            
            print_and_log(f"  {i:2d}. {track}")
            print_and_log(f"      –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: {avg_time:.3f}—Å ({total_stops} —Å—Ç–æ–ø—ñ–≤)")
            print_and_log(f"      –ù–∞–π–∫—Ä–∞—â–∏–π —á–∞—Å: {best_time:.3f}—Å")
        print_and_log()

        # ============================================
        # 9. –ü–Ü–î–°–£–ú–ö–ò –¢–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á
        # ============================================
        print_and_log("üéØ –ü–Ü–î–°–£–ú–ö–ò –¢–ê –°–¢–†–ê–¢–ï–ì–Ü–ß–ù–Ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á")
        print_and_log("-" * 45)

        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_stops = len(pit_data)
        overall_avg = pit_data['pit_duration'].mean()
        fastest_overall = pit_data['pit_duration'].min()
        slowest_overall = pit_data['pit_duration'].max()
        consistency = pit_data['pit_duration'].std()

        print_and_log("–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–∑–æ–Ω—É:")
        print_and_log(f"  ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ—Ç-—Å—Ç–æ–ø—ñ–≤: {total_stops}")
        print_and_log(f"  ‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –ø—ñ—Ç-—Å—Ç–æ–ø—É: {overall_avg:.3f}—Å")
        print_and_log(f"  ‚Ä¢ –ù–∞–π—à–≤–∏–¥—à–∏–π –ø—ñ—Ç-—Å—Ç–æ–ø —Å–µ–∑–æ–Ω—É: {fastest_overall:.3f}—Å")
        print_and_log(f"  ‚Ä¢ –ù–∞–π–ø–æ–≤—ñ–ª—å–Ω—ñ—à–∏–π –ø—ñ—Ç-—Å—Ç–æ–ø: {slowest_overall:.3f}—Å")
        print_and_log(f"  ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {consistency:.3f}—Å")
        print_and_log()

        # –ù–∞–π–∫—Ä–∞—â—ñ –∫–æ–º–∞–Ω–¥–∏
        best_team = team_analysis.index[0]
        best_team_avg = team_analysis.loc[best_team, 'pit_duration_mean']
        
        print_and_log("–ö–ª—é—á–æ–≤—ñ –≤–∏—Å–Ω–æ–≤–∫–∏:")
        print_and_log(f"  ‚Ä¢ –ù–∞–π–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∞ –∫–æ–º–∞–Ω–¥–∞: {best_team} ({best_team_avg:.3f}—Å)")
        
        if not track_analysis.empty:
            fastest_track = track_analysis.index[0]
            fastest_track_avg = track_analysis.loc[fastest_track, 'pit_duration_mean']
            print_and_log(f"  ‚Ä¢ –ù–∞–π—à–≤–∏–¥—à–∏–π –ø—ñ—Ç-–ª–µ–π–Ω: {fastest_track} ({fastest_track_avg:.3f}—Å)")
        
        print_and_log()
        print_and_log("–°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
        print_and_log("  1. üåßÔ∏è  –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≥–æ–¥–Ω–∏—Ö —É–º–æ–≤ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–∏–π –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø—ñ—Ç-—Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó")
        print_and_log("  2. üöó  –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—ñ–≤ Safety Car/VSC –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏—Ö –ø—ñ—Ç-—Å—Ç–æ–ø—ñ–≤")
        print_and_log("  3. üèÅ  –§–æ–∫—É—Å –Ω–∞ —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ —Ä–æ–±–æ—Ç–∏ –ø—ñ—Ç-–∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è –≤–∞—Ä—ñ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
        print_and_log("  4. üìä  –ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤ –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π")
        print_and_log("  5. üîß  –ê–¥–∞–ø—Ç–∞—Ü—ñ—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç–µ–π –∫–æ–∂–Ω–æ—ó —Ç—Ä–∞—Å–∏")
        
        print_and_log()
        print_and_log("=" * 80)
        print_and_log("–ê–ù–ê–õ–Ü–ó –ó–ê–í–ï–†–®–ï–ù–û")
        print_and_log(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {output_file}")
        print_and_log("=" * 80)

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —Ñ–∞–π–ª
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(output_content))

        print(f"\n‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {output_file}")

    except sqlite3.Error as e:
        error_msg = f"–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}"
        print_and_log(error_msg)
        print(error_msg)
    except Exception as e:
        error_msg = f"–ü–æ–º–∏–ª–∫–∞: {e}"
        print_and_log(error_msg)
        print(error_msg)
    finally:
        conn.close()

if __name__ == "__main__":
    analyze_f1_pit_strategy()
